# -*- coding: utf-8 -*-
"""iris flower.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u11YN519ojt0d2fAktfVttAwTbiuLu95
"""

#@title 📦 1. Import Librarie


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

#@title 📂 2. Load the Dataset
df = pd.read_csv("/content/IRIS.csv")  # Replace with your actual CSV file

# 🔍 View data
print(df.head())
print(df.info())
print(df.describe())

#@title 🧼 3. Data Cleaning
print("Missing values:\n", df.isnull().sum())
print("Duplicate rows:", df.duplicated().sum())

# Drop duplicates if any
df = df.drop_duplicates()

#@title 📊 4. EDA – Data Visualization

# a. Pairplot to see relationships
sns.pairplot(df, hue='species')  # change to actual column name if different
plt.show()

# b. Correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Feature Correlation")
plt.show()

# c. Boxplots for outliers
plt.figure(figsize=(12, 6))
df.drop(columns=['species']).boxplot()
plt.title("Boxplots of Numerical Features")
plt.show()

# 🔁 5. Label Encoding
le = LabelEncoder()
df['species_encoded'] = le.fit_transform(df['species'])  # convert labels to 0, 1, 2

# 🧪 6. Train-Test Split
X = df.drop(columns=['species', 'species_encoded'])  # features
y = df['species_encoded']  # target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 🤖 7. Model Training – KNN
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# 📈 8. Evaluation
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d')
plt.title("Confusion Matrix - KNN")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# 🔮 9. Predict New Sample
sample = [[5.5, 3.5, 1.4, 10.2]]
predicted_class = model.predict(sample)
predicted_label = le.inverse_transform(predicted_class)

print("Predicted Species:", predicted_label[0])

import matplotlib.pyplot as plt
import numpy as np

# Sample input (you can change this)
sample = [[5.1, 3.5, 1.4, 0.2]]

# Predict the class
predicted_class = model.predict(sample)
predicted_label = le.inverse_transform(predicted_class)

# 🌸 Visualize the Prediction
features = ['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']
values = sample[0]

# Plot input features
plt.figure(figsize=(8, 4))
bars = plt.barh(features, values, color='skyblue')
plt.xlabel("cm")
plt.title("Iris Flower Feature Input")
for bar in bars:
    width = bar.get_width()
    plt.text(width + 0.05, bar.get_y() + 0.25, f'{width}', va='center')

# Display predicted species
plt.figtext(0.5, -0.1, f"🌼 Predicted Species: {predicted_label[0]}", fontsize=14, ha='center', color='green')
plt.tight_layout()
plt.show()